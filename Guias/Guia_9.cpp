/* *
Depth-First Search (DFS)
DFS explora tan profundo como sea posible en un camino antes de retroceder.

Estrategia: Sigue un camino hasta llegar a un nodo sin hijos, luego retrocede y prueba otro camino.

Estructura usada: Pila (puede implementarse con recursi칩n o una pila expl칤cita).

Orden de recorrido: Va profundo primero antes de explorar otros caminos.

Consumo de memoria: Generalmente menos que BFS porque no almacena todos los nodos en memoria al mismo tiempo.

Uso com칰n: Encontrar soluciones en problemas como Sudoku, an치lisis de conectividad en grafos, b칰squeda en 치rboles.

游깴 Breadth-First Search (BFS)
BFS explora todos los nodos de un nivel antes de pasar al siguiente.

Estrategia: Explora primero todos los vecinos cercanos, luego expande hacia nodos m치s lejanos.

Estructura usada: Cola (FIFO).

Orden de recorrido: Explora los nodos por niveles desde la ra칤z.

Consumo de memoria: Puede ser alto porque mantiene en memoria todos los nodos de un nivel antes de pasar al siguiente.

Uso com칰n: Encontrar la ruta m치s corta en un grafo, problemas como el camino m치s corto en un laberinto, b칰squeda en redes.

游댠 Ejemplo Visual

Imagina un laberinto donde tienes que encontrar la salida:

DFS: Avanza profundo en una direcci칩n, retrocede si encuentra un obst치culo y prueba otro camino.

BFS: Expande todas las opciones posibles cercanas antes de continuar con caminos m치s alejados.**/

#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> grafo = {
    {1, 2},  // Nodo 0 conectado con 1 y 2
    {0, 3, 4},  // Nodo 1 conectado con 0, 3 y 4
    {0, 4},  // Nodo 2 conectado con 0 y 4
    {1},  // Nodo 3 conectado con 1
    {1, 2}  // Nodo 4 conectado con 1 y 2
};
// Funci칩n de DFS (b칰squeda en profundidad)
void dfs(int nodo, vector<bool>& visitado) {
    visitado[nodo] = true;
    cout << nodo << " ";

    for (int vecino : grafo[nodo]) {
        if (!visitado[vecino]) {
            dfs(vecino, visitado);
        }
    }
}
// Funci칩n de BFS (b칰squeda en anchura)
void bfs(int inicio) {
    vector<bool> visitado(grafo.size(), false);
    queue<int> q;

    visitado[inicio] = true;
    q.push(inicio);

    while (!q.empty()) {
        int nodo = q.front();
        q.pop();
        cout << nodo << " ";

        for (int vecino : grafo[nodo]) {
            if (!visitado[vecino]) {
                visitado[vecino] = true;
                q.push(vecino);
            }
        }
    }
}
signed main()
{
    vector<bool> visitado(grafo.size(), false);

    cout << "DFS: ";
    dfs(0, visitado);
    cout << "\n";

    cout << "BFS: ";
    bfs(0);
    cout << "\n";
}
